{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Grid, GridItem } from \"@chakra-ui/layout\";\nimport React from \"react\";\nimport GameCard from \"./GameCard\";\n\nvar Games = function Games(_ref) {\n  var games = _ref.games;\n  var upcoming = games.filter(function (game) {\n    return !game.finished;\n  }) || [];\n  var played = games.filter(function (game) {\n    return game.finished;\n  }) || [];\n\n  var byDivision = function byDivision(gameArray) {\n    return gameArray.reduce(function (acc, upcomingGame) {\n      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, upcomingGame.division, [].concat(_toConsumableArray(acc[upcomingGame.division]), [upcomingGame])));\n    }, {\n      d1: [],\n      d3: []\n    });\n  };\n\n  var gameCards = [{\n    games: upcoming || [],\n    title: \"Next Game\",\n    link: \"/schedule\",\n    linkDisplay: \"Schedule\"\n  }, {\n    games: played || [],\n    title: \"Last Game\",\n    link: \"/schedule\",\n    linkDisplay: \"Results\"\n  }];\n  return __jsx(Grid, {\n    h: \"auto\",\n    templateRows: \"repeat(2, 1fr)\",\n    templateColumns: \"repeat(2, 1fr)\",\n    gap: 4,\n    m: 8\n  }, gameCards.map(function (game) {\n    return __jsx(GridItem, {\n      key: game.title,\n      colSpan: [1, 2, 2, 1, 1],\n      rowSpan: [2, 1, 1, 2, 2]\n    }, __jsx(GameCard, game));\n  }));\n};\n\nexport default Games;","map":null,"metadata":{},"sourceType":"module"}