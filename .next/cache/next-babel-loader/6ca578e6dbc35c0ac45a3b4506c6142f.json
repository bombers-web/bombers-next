{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/elbgi/Desktop/bombers/frontend/components/Games/index.js\";\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Grid, GridItem } from \"@chakra-ui/layout\";\nimport React from \"react\";\nimport GameCard from \"./GameCard\";\n\nvar Games = function Games(_ref) {\n  var games = _ref.games;\n  var upcoming = games.filter(function (game) {\n    return !game.finished;\n  }) || [];\n  var played = games.filter(function (game) {\n    return game.finished;\n  }) || [];\n\n  var byDivision = function byDivision(gameArray) {\n    return gameArray.reduce(function (acc, upcomingGame) {\n      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, upcomingGame.division, [].concat(_toConsumableArray(acc[upcomingGame.division]), [upcomingGame])));\n    }, {\n      d1: [],\n      d3: []\n    });\n  };\n\n  var gameCards = [{\n    games: upcoming || [],\n    title: \"Next Game\",\n    link: \"/schedule\",\n    linkDisplay: \"Schedule\"\n  }, {\n    games: played || [],\n    title: \"Last Game\",\n    link: \"/schedule\",\n    linkDisplay: \"Results\"\n  }];\n  return __jsx(Grid, {\n    h: \"auto\",\n    templateRows: \"repeat(2, 1fr)\",\n    templateColumns: \"repeat(2, 1fr)\",\n    gap: 4,\n    m: 8,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, gameCards.map(function (game) {\n    return __jsx(GridItem, {\n      key: game.title,\n      colSpan: [1, 2, 2, 1, 1],\n      rowSpan: [2, 1, 1, 2, 2],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, __jsx(GameCard, _extends({}, game, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    })));\n  }));\n};\n\n_c = Games;\nexport default Games;\n\nvar _c;\n\n$RefreshReg$(_c, \"Games\");","map":{"version":3,"sources":["/Users/elbgi/Desktop/bombers/frontend/components/Games/index.js"],"names":["Grid","GridItem","React","GameCard","Games","games","upcoming","filter","game","finished","played","byDivision","gameArray","reduce","acc","upcomingGame","division","d1","d3","gameCards","title","link","linkDisplay","map"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,IAAT,EAAeC,QAAf,QAA+B,mBAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAAe;AAAA,MAAZC,KAAY,QAAZA,KAAY;AAC3B,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAa,UAACC,IAAD;AAAA,WAAU,CAACA,IAAI,CAACC,QAAhB;AAAA,GAAb,KAA0C,EAA3D;AACA,MAAMC,MAAM,GAAGL,KAAK,CAACE,MAAN,CAAa,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACC,QAAf;AAAA,GAAb,KAAyC,EAAxD;;AAEA,MAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,SAAD,EAAe;AAChC,WAAOA,SAAS,CAACC,MAAV,CACL,UAACC,GAAD,EAAMC,YAAN,EAAuB;AACrB,6CACKD,GADL,2BAEGC,YAAY,CAACC,QAFhB,+BAGOF,GAAG,CAACC,YAAY,CAACC,QAAd,CAHV,IAIID,YAJJ;AAOD,KATI,EAUL;AAAEE,MAAAA,EAAE,EAAE,EAAN;AAAUC,MAAAA,EAAE,EAAE;AAAd,KAVK,CAAP;AAYD,GAbD;;AAeA,MAAMC,SAAS,GAAG,CAChB;AACEd,IAAAA,KAAK,EAAEC,QAAQ,IAAI,EADrB;AAEEc,IAAAA,KAAK,EAAE,WAFT;AAGEC,IAAAA,IAAI,EAAE,WAHR;AAIEC,IAAAA,WAAW,EAAE;AAJf,GADgB,EAOhB;AACEjB,IAAAA,KAAK,EAAEK,MAAM,IAAI,EADnB;AAEEU,IAAAA,KAAK,EAAE,WAFT;AAGEC,IAAAA,IAAI,EAAE,WAHR;AAIEC,IAAAA,WAAW,EAAE;AAJf,GAPgB,CAAlB;AAeA,SACE,MAAC,IAAD;AACE,IAAA,CAAC,EAAC,MADJ;AAEE,IAAA,YAAY,EAAC,gBAFf;AAGE,IAAA,eAAe,EAAC,gBAHlB;AAIE,IAAA,GAAG,EAAE,CAJP;AAKE,IAAA,CAAC,EAAE,CALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGH,SAAS,CAACI,GAAV,CAAc,UAACf,IAAD;AAAA,WACb,MAAC,QAAD;AACE,MAAA,GAAG,EAAEA,IAAI,CAACY,KADZ;AAEE,MAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAFX;AAGE,MAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE,MAAC,QAAD,eAAcZ,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OALF,CADa;AAAA,GAAd,CAPH,CADF;AAmBD,CArDD;;KAAMJ,K;AAuDN,eAAeA,KAAf","sourcesContent":["import { Grid, GridItem } from \"@chakra-ui/layout\";\nimport React from \"react\";\nimport GameCard from \"./GameCard\";\n\nconst Games = ({ games }) => {\n  const upcoming = games.filter((game) => !game.finished) || [];\n  const played = games.filter((game) => game.finished) || [];\n\n  const byDivision = (gameArray) => {\n    return gameArray.reduce(\n      (acc, upcomingGame) => {\n        return {\n          ...acc,\n          [upcomingGame.division]: [\n            ...acc[upcomingGame.division],\n            upcomingGame,\n          ],\n        };\n      },\n      { d1: [], d3: [] }\n    );\n  };\n\n  const gameCards = [\n    {\n      games: upcoming || [],\n      title: \"Next Game\",\n      link: \"/schedule\",\n      linkDisplay: \"Schedule\",\n    },\n    {\n      games: played || [],\n      title: \"Last Game\",\n      link: \"/schedule\",\n      linkDisplay: \"Results\",\n    },\n  ];\n\n  return (\n    <Grid\n      h=\"auto\"\n      templateRows=\"repeat(2, 1fr)\"\n      templateColumns=\"repeat(2, 1fr)\"\n      gap={4}\n      m={8}\n    >\n      {gameCards.map((game) => (\n        <GridItem\n          key={game.title}\n          colSpan={[1, 2, 2, 1, 1]}\n          rowSpan={[2, 1, 1, 2, 2]}\n        >\n          <GameCard {...game} />\n        </GridItem>\n      ))}\n    </Grid>\n  );\n};\n\nexport default Games;\n"]},"metadata":{},"sourceType":"module"}