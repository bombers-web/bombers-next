{"ast":null,"code":"var _jsxFileName = \"/Users/elbgi/Desktop/bombers/frontend/components/Games/GameCard.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { Badge, Box, Text, SimpleGrid, Flex, Grid, Heading, Stack, Divider, Center } from \"@chakra-ui/layout\";\nimport { Button, Link, LinkBox, SkeletonText } from \"@chakra-ui/react\";\nimport Card from \"../../common/Card\";\nimport Image from \"../../common/Image\";\nimport GameInfo from \"./GameInfo\";\n\nconst GameCard = ({\n  title = \"\",\n  link = \"\",\n  linkDisplay = \"\",\n  games = []\n}) => {\n  const styles = {\n    backgroundColor: \"#121212\",\n    // backgroundImage:\n    //   \"linear-gradient(to right bottom, #212121 50%, #7f8c8d 50.3%)\",\n    boxShadow: \"0 1px 4px #151515\"\n  };\n  console.log({\n    games\n  });\n  return __jsx(Box, {\n    position: \"relative\",\n    top: \"-100px\",\n    m: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, __jsx(Card, {\n    styles: styles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, __jsx(SkeletonText, {\n    w: \"80%\",\n    m: \"auto\",\n    startColor: \"brand.medium\",\n    endColor: \"brand.dark\",\n    isLoaded: games.length,\n    fadeDuration: 0.6,\n    speed: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, __jsx(Stack, {\n    direction: \"row\" // m=\"auto\"\n    ,\n    p: \"8\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, games.map(({\n    home,\n    away,\n    location,\n    date,\n    home_score,\n    away_score,\n    division,\n    slug\n  }, i) => {\n    const gameInfo = {\n      homeTeam: _objectSpread(_objectSpread({}, home), {}, {\n        score: home_score\n      }),\n      awayTeam: _objectSpread(_objectSpread({}, away), {}, {\n        score: away_score\n      }),\n      location: location,\n      date: date\n    };\n    return __jsx(React.Fragment, null, __jsx(GameInfo, _extends({\n      key: slug || `${home.name}-vs-${away.name}`\n    }, gameInfo, {\n      division: division,\n      preview: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }\n    })), i === 0 && __jsx(Center, {\n      height: \"100px\",\n      margin: \"8px\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"180px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 23\n      }\n    }, __jsx(Divider, {\n      orientation: \"vertical\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }\n    })));\n  })))));\n};\n\nexport default GameCard;","map":{"version":3,"sources":["/Users/elbgi/Desktop/bombers/frontend/components/Games/GameCard.js"],"names":["React","Badge","Box","Text","SimpleGrid","Flex","Grid","Heading","Stack","Divider","Center","Button","Link","LinkBox","SkeletonText","Card","Image","GameInfo","GameCard","title","link","linkDisplay","games","styles","backgroundColor","boxShadow","console","log","length","map","home","away","location","date","home_score","away_score","division","slug","i","gameInfo","homeTeam","score","awayTeam","name"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Badge,\n  Box,\n  Text,\n  SimpleGrid,\n  Flex,\n  Grid,\n  Heading,\n  Stack,\n  Divider,\n  Center,\n} from \"@chakra-ui/layout\";\nimport { Button, Link, LinkBox, SkeletonText } from \"@chakra-ui/react\";\n\nimport Card from \"../../common/Card\";\nimport Image from \"../../common/Image\";\nimport GameInfo from \"./GameInfo\";\n\nconst GameCard = ({ title = \"\", link = \"\", linkDisplay = \"\", games = [] }) => {\n  const styles = {\n    backgroundColor: \"#121212\",\n    // backgroundImage:\n    //   \"linear-gradient(to right bottom, #212121 50%, #7f8c8d 50.3%)\",\n    boxShadow: \"0 1px 4px #151515\",\n  };\n  console.log({ games });\n\n  return (\n    <Box position=\"relative\" top=\"-100px\" m=\"auto\">\n      <Card styles={styles}>\n        <SkeletonText\n          w=\"80%\"\n          m=\"auto\"\n          startColor=\"brand.medium\"\n          endColor=\"brand.dark\"\n          isLoaded={games.length}\n          fadeDuration={0.6}\n          speed={1}\n        >\n          <Stack\n            direction=\"row\"\n            // m=\"auto\"\n            p=\"8\"\n            justifyContent=\"space-around\"\n            alignItems=\"center\"\n          >\n            {games.map(\n              (\n                {\n                  home,\n                  away,\n                  location,\n                  date,\n                  home_score,\n                  away_score,\n                  division,\n                  slug,\n                },\n                i\n              ) => {\n                const gameInfo = {\n                  homeTeam: { ...home, score: home_score },\n                  awayTeam: { ...away, score: away_score },\n                  location: location,\n                  date: date,\n                };\n\n                return (\n                  <>\n                    <GameInfo\n                      key={slug || `${home.name}-vs-${away.name}`}\n                      {...gameInfo}\n                      division={division}\n                      preview\n                    ></GameInfo>\n                    {i === 0 && (\n                      <Center\n                        height=\"100px\"\n                        margin=\"8px\"\n                        alignItems=\"center\"\n                        justifyContent=\"center\"\n                        h=\"180px\"\n                      >\n                        <Divider orientation=\"vertical\" />\n                      </Center>\n                    )}\n                  </>\n                );\n              }\n            )}\n          </Stack>\n        </SkeletonText>\n      </Card>\n    </Box>\n  );\n};\n\nexport default GameCard;\n"]},"metadata":{},"sourceType":"module"}