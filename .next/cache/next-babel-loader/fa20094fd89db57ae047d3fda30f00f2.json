{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { Badge, Box, Text, SimpleGrid, Flex, Grid, Heading, Stack, Divider, Center } from \"@chakra-ui/layout\";\nimport { Button, Link, LinkBox, SkeletonText } from \"@chakra-ui/react\";\nimport Card from \"../../common/Card\";\nimport GameInfo from \"./GameInfo\";\n\nconst GameCard = ({\n  title = \"\",\n  link = \"\",\n  linkDisplay = \"\",\n  games = []\n}) => {\n  const styles = {\n    backgroundColor: \"#121212\",\n    // backgroundImage:\n    //   \"linear-gradient(to right bottom, #212121 50%, #7f8c8d 50.3%)\",\n    boxShadow: \"0 1px 4px #151515\"\n  };\n  return __jsx(Box, {\n    position: \"relative\",\n    top: \"-100px\",\n    m: \"auto\"\n  }, __jsx(Card, {\n    styles: styles\n  }, __jsx(SkeletonText, {\n    w: \"80%\",\n    m: \"auto\",\n    startColor: \"brand.medium\",\n    endColor: \"brand.dark\",\n    isLoaded: games.length,\n    fadeDuration: 0.6,\n    speed: 1\n  }, __jsx(Stack, {\n    direction: \"row\" // m=\"auto\"\n    ,\n    p: \"8\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\"\n  }, games.map(({\n    home,\n    away,\n    location,\n    date,\n    home_score,\n    away_score,\n    division,\n    slug\n  }, i) => {\n    const gameInfo = {\n      homeTeam: _objectSpread(_objectSpread({}, home), {}, {\n        score: home_score\n      }),\n      awayTeam: _objectSpread(_objectSpread({}, away), {}, {\n        score: away_score\n      }),\n      location: location,\n      date: date\n    };\n    return __jsx(React.Fragment, null, __jsx(GameInfo, _extends({\n      key: slug || `${home.name}-vs-${away.name}`\n    }, gameInfo, {\n      division: division,\n      preview: true\n    })), i === 0 && __jsx(Center, {\n      height: \"100px\",\n      margin: \"8px\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"180px\"\n    }, __jsx(Divider, {\n      orientation: \"vertical\"\n    })));\n  })))));\n};\n\nexport default GameCard;","map":null,"metadata":{},"sourceType":"module"}