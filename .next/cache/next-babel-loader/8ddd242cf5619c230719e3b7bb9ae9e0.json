{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Box, Center, Divider, Stack } from \"@chakra-ui/layout\";\nimport { SkeletonText } from \"@chakra-ui/react\";\nimport React, { Fragment } from \"react\";\nimport Card from \"../../common/Card\";\nimport GameInfo from \"./GameInfo\";\n\nvar GameCard = function GameCard(_ref) {\n  var _ref$title = _ref.title,\n      title = _ref$title === void 0 ? \"\" : _ref$title,\n      _ref$link = _ref.link,\n      link = _ref$link === void 0 ? \"\" : _ref$link,\n      _ref$linkDisplay = _ref.linkDisplay,\n      linkDisplay = _ref$linkDisplay === void 0 ? \"\" : _ref$linkDisplay,\n      _ref$games = _ref.games,\n      games = _ref$games === void 0 ? [] : _ref$games;\n  var styles = {\n    backgroundColor: \"#121212\",\n    // backgroundImage:\n    //   \"linear-gradient(to right bottom, #212121 50%, #7f8c8d 50.3%)\",\n    boxShadow: \"0 1px 4px #151515\"\n  };\n  return __jsx(Box, {\n    position: \"relative\",\n    top: \"-100px\",\n    m: \"auto\"\n  }, __jsx(Card, {\n    styles: styles\n  }, __jsx(SkeletonText, {\n    w: \"80%\",\n    m: \"auto\",\n    startColor: \"brand.medium\",\n    endColor: \"brand.dark\",\n    isLoaded: games.length,\n    fadeDuration: 0.6,\n    speed: 1\n  }, __jsx(Stack, {\n    direction: \"row\" // m=\"auto\"\n    ,\n    p: \"8\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\"\n  }, games.map(function (_ref2, i) {\n    var home = _ref2.home,\n        away = _ref2.away,\n        location = _ref2.location,\n        date = _ref2.date,\n        home_score = _ref2.home_score,\n        away_score = _ref2.away_score,\n        division = _ref2.division,\n        slug = _ref2.slug;\n    var gameInfo = {\n      homeTeam: _objectSpread(_objectSpread({}, home), {}, {\n        score: home_score\n      }),\n      awayTeam: _objectSpread(_objectSpread({}, away), {}, {\n        score: away_score\n      }),\n      location: location,\n      date: date\n    };\n    return __jsx(Fragment, {\n      key: slug || \"\".concat(home.name, \"-vs-\").concat(away.name)\n    }, __jsx(GameInfo, _extends({}, gameInfo, {\n      division: division,\n      preview: true\n    })), i === 0 && __jsx(Center, {\n      height: \"100px\",\n      margin: \"8px\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"180px\"\n    }, __jsx(Divider, {\n      orientation: \"vertical\"\n    })));\n  })))));\n};\n\nexport default GameCard;","map":null,"metadata":{},"sourceType":"module"}