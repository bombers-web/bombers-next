{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/elbgi/Desktop/bombers/frontend/components/contactForm.js\",\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SimpleGrid, Stack, Input, Textarea, InputLeftElement, InputGroup, Box, RadioGroup, Radio, useRadio, useRadioGroup } from \"@chakra-ui/react\";\nimport { ChatIcon, EmailIcon, PhoneIcon } from \"@chakra-ui/icons\";\nimport React, { useState } from \"react\";\nimport _startCase from \"lodash/startCase\";\n\nvar ContactForm = function ContactForm() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  var _useState = useState({\n    name: \"\",\n    last: \"\",\n    email: \"\",\n    message: \"\",\n    phone: \"\",\n    reason: \"\"\n  }),\n      contact = _useState[0],\n      setContact = _useState[1];\n\n  var handleChange = function handleChange(_ref) {\n    var currentTarget = _ref.currentTarget,\n        target = _ref.target,\n        e = _objectWithoutProperties(_ref, [\"currentTarget\", \"target\"]);\n\n    console.log({\n      currentTarget: currentTarget,\n      target: target,\n      e: e\n    });\n    setContact(_objectSpread(_objectSpread({}, contact), {}, _defineProperty({}, currentTarget.name, currentTarget.value)));\n  };\n\n  var RadioCard = function RadioCard(props) {\n    _s();\n\n    var _useRadio = useRadio(props),\n        getInputProps = _useRadio.getInputProps,\n        getCheckboxProps = _useRadio.getCheckboxProps;\n\n    var input = getInputProps();\n    var checkbox = getCheckboxProps();\n    return __jsx(Box, {\n      as: \"label\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }\n    }, __jsx(\"input\", _extends({}, input, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    })), __jsx(Box, _extends({}, checkbox, {\n      cursor: \"pointer\",\n      borderWidth: \"1px\",\n      borderRadius: \"md\",\n      boxShadow: \"md\",\n      minWidth: \"100px\",\n      _checked: {\n        bg: \"gray.800\",\n        color: \"gray.100\",\n        borderColor: \"black.600\"\n      },\n      _focus: {\n        boxShadow: \"outline\"\n      },\n      px: 5,\n      py: 3,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }), props.children));\n  };\n\n  _s(RadioCard, \"4KX4hoFsBDOGdduRZSU53GR/xio=\", false, function () {\n    return [useRadio];\n  });\n\n  var options = [\"business_inquiry\", \"new_player\", \"other\"];\n\n  var _useRadioGroup = useRadioGroup({\n    name: \"reason\",\n    defaultValue: \"business_inquiry\",\n    onChange: function onChange(reason) {\n      return setContact(_objectSpread(_objectSpread({}, contact), {}, {\n        reason: reason\n      }));\n    }\n  }),\n      getRootProps = _useRadioGroup.getRootProps,\n      getRadioProps = _useRadioGroup.getRadioProps;\n\n  var group = getRootProps();\n  return __jsx(Box, {\n    maxW: \"5xl\",\n    borderWidth: \"2px\",\n    overflow: \"hidden\",\n    borderRadius: \"2xl\",\n    borderColor: \"gray.light\",\n    cursor: \"pointer\",\n    p: \"8\",\n    bg: \"gray.700\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, __jsx(SimpleGrid, {\n    direction: \"column\",\n    columns: 1,\n    spacing: 8,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, \"Any questions or comments? Leave us a message!\", __jsx(Stack, {\n    direction: \"row\",\n    spacing: 3,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    sx: {\n      color: \"gray\",\n      _focus: {\n        color: \"black\"\n      }\n    },\n    variant: \"filled\",\n    placeholder: \"Name\",\n    name: \"name\",\n    value: contact.name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }), __jsx(Input, {\n    sx: {\n      color: \"gray\",\n      _focus: {\n        color: \"black\"\n      }\n    },\n    variant: \"filled\",\n    placeholder: \"Last\",\n    name: \"last\",\n    value: contact.last,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  })), __jsx(Stack, {\n    spacing: 8,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, __jsx(InputGroup, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }, __jsx(InputLeftElement, {\n    pointerEvents: \"none\",\n    children: __jsx(EmailIcon, {\n      color: \"gray.400\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 25\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }), __jsx(Input, {\n    sx: {\n      color: \"gray\",\n      _focus: {\n        color: \"black\"\n      }\n    },\n    type: \"email\",\n    variant: \"filled\",\n    placeholder: \"Email\",\n    name: \"email\",\n    value: contact.email,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  })), __jsx(InputGroup, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  }, __jsx(InputLeftElement, {\n    pointerEvents: \"none\",\n    children: __jsx(PhoneIcon, {\n      color: \"gray.400\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 25\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }), __jsx(Input, {\n    sx: {\n      color: \"gray\",\n      _focus: {\n        color: \"black\"\n      }\n    },\n    variant: \"filled\",\n    type: \"tel\",\n    placeholder: \"Phone number\",\n    name: \"phone\",\n    value: contact.phone,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  })), __jsx(Stack, _extends({}, group, {\n    direction: \"row\",\n    spacing: 2,\n    justifyContent: \"space-evenly\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }), options.map(function (value) {\n    var radio = getRadioProps({\n      value: value\n    });\n    return __jsx(RadioCard, _extends({\n      key: value\n    }, radio, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }\n    }), _startCase(value));\n  })), __jsx(Textarea, {\n    sx: {\n      color: \"gray\",\n      _focus: {\n        color: \"black\"\n      }\n    },\n    variant: \"filled\",\n    type: \"text\",\n    placeholder: \"Message\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_s2(ContactForm, \"lY5eQsY4TxWGgrh2x94/YOUzUfs=\", false, function () {\n  return [useRadioGroup];\n});\n\n_c = ContactForm;\nexport default ContactForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"sources":["/Users/elbgi/Desktop/bombers/frontend/components/contactForm.js"],"names":["SimpleGrid","Stack","Input","Textarea","InputLeftElement","InputGroup","Box","RadioGroup","Radio","useRadio","useRadioGroup","ChatIcon","EmailIcon","PhoneIcon","React","useState","_startCase","ContactForm","name","last","email","message","phone","reason","contact","setContact","handleChange","currentTarget","target","e","console","log","value","RadioCard","props","getInputProps","getCheckboxProps","input","checkbox","bg","color","borderColor","boxShadow","children","options","defaultValue","onChange","getRootProps","getRadioProps","group","_focus","map","radio"],"mappings":"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","sourcesContent":["import {\n  SimpleGrid,\n  Stack,\n  Input,\n  Textarea,\n  InputLeftElement,\n  InputGroup,\n  Box,\n  RadioGroup,\n  Radio,\n  useRadio,\n  useRadioGroup,\n} from \"@chakra-ui/react\";\nimport { ChatIcon, EmailIcon, PhoneIcon } from \"@chakra-ui/icons\";\nimport React, { useState } from \"react\";\nimport _startCase from \"lodash/startCase\";\n\nconst ContactForm = () => {\n  const [contact, setContact] = useState({\n    name: \"\",\n    last: \"\",\n    email: \"\",\n    message: \"\",\n    phone: \"\",\n    reason: \"\",\n  });\n\n  const handleChange = ({ currentTarget, target, ...e }) => {\n    console.log({ currentTarget, target, e });\n    setContact({\n      ...contact,\n      [currentTarget.name]: currentTarget.value,\n    });\n  };\n\n  const RadioCard = (props) => {\n    const { getInputProps, getCheckboxProps } = useRadio(props);\n    const input = getInputProps();\n    const checkbox = getCheckboxProps();\n    return (\n      <Box as=\"label\">\n        <input {...input} />\n        <Box\n          {...checkbox}\n          cursor=\"pointer\"\n          borderWidth=\"1px\"\n          borderRadius=\"md\"\n          boxShadow=\"md\"\n          minWidth=\"100px\"\n          _checked={{\n            bg: \"gray.800\",\n            color: \"gray.100\",\n            borderColor: \"black.600\",\n          }}\n          _focus={{\n            boxShadow: \"outline\",\n          }}\n          px={5}\n          py={3}\n        >\n          {props.children}\n        </Box>\n      </Box>\n    );\n  };\n\n  const options = [\"business_inquiry\", \"new_player\", \"other\"];\n\n  const { getRootProps, getRadioProps } = useRadioGroup({\n    name: \"reason\",\n    defaultValue: \"business_inquiry\",\n    onChange: (reason) => setContact({ ...contact, reason }),\n  });\n\n  const group = getRootProps();\n\n  return (\n    <Box\n      maxW=\"5xl\"\n      borderWidth=\"2px\"\n      overflow=\"hidden\"\n      borderRadius=\"2xl\"\n      borderColor=\"gray.light\"\n      cursor=\"pointer\"\n      p=\"8\"\n      bg=\"gray.700\"\n    >\n      <SimpleGrid direction=\"column\" columns={1} spacing={8}>\n        Any questions or comments? Leave us a message!\n        <Stack direction=\"row\" spacing={3}>\n          <Input\n            sx={{\n              color: \"gray\",\n              _focus: {\n                color: \"black\",\n              },\n            }}\n            variant=\"filled\"\n            placeholder=\"Name\"\n            name=\"name\"\n            value={contact.name}\n          />\n          <Input\n            sx={{\n              color: \"gray\",\n              _focus: {\n                color: \"black\",\n              },\n            }}\n            variant=\"filled\"\n            placeholder=\"Last\"\n            name=\"last\"\n            value={contact.last}\n          />\n        </Stack>\n        <Stack spacing={8}>\n          <InputGroup>\n            <InputLeftElement\n              pointerEvents=\"none\"\n              children={<EmailIcon color=\"gray.400\" />}\n            />\n            <Input\n              sx={{\n                color: \"gray\",\n                _focus: {\n                  color: \"black\",\n                },\n              }}\n              type=\"email\"\n              variant=\"filled\"\n              placeholder=\"Email\"\n              name=\"email\"\n              value={contact.email}\n            />\n          </InputGroup>\n          <InputGroup>\n            <InputLeftElement\n              pointerEvents=\"none\"\n              children={<PhoneIcon color=\"gray.400\" />}\n            />\n            <Input\n              sx={{\n                color: \"gray\",\n                _focus: {\n                  color: \"black\",\n                },\n              }}\n              variant=\"filled\"\n              type=\"tel\"\n              placeholder=\"Phone number\"\n              name=\"phone\"\n              value={contact.phone}\n            />\n          </InputGroup>\n\n          <Stack\n            {...group}\n            direction=\"row\"\n            spacing={2}\n            justifyContent=\"space-evenly\"\n          >\n            {options.map((value) => {\n              const radio = getRadioProps({ value });\n              return (\n                <RadioCard key={value} {...radio}>\n                  {_startCase(value)}\n                </RadioCard>\n              );\n            })}\n          </Stack>\n\n          <Textarea\n            sx={{\n              color: \"gray\",\n              _focus: {\n                color: \"black\",\n              },\n            }}\n            variant=\"filled\"\n            type=\"text\"\n            placeholder=\"Message\"\n          />\n        </Stack>\n      </SimpleGrid>\n    </Box>\n  );\n};\n\nexport default ContactForm;\n"]},"metadata":{},"sourceType":"module"}