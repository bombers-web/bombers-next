{"ast":null,"code":"var _jsxFileName = \"/Users/elbgi/Desktop/bombers/frontend/components/Games/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SimpleGrid, Flex, Box, Grid, GridItem } from \"@chakra-ui/layout\"; // import Link from \"next/link\";\n\nimport React, { useState } from \"react\";\nimport GameCard from \"./GameCard\";\n\nconst Games = ({\n  games\n}) => {\n  console.log({\n    games\n  });\n  const upcoming = games.filter(game => !game.finished);\n  const played = games.filter(game => game.finished);\n\n  const byDivision = gameArray => {\n    return gameArray.reduce((acc, upcomingGame) => {\n      return _objectSpread(_objectSpread({}, acc), {}, {\n        [upcomingGame.division]: [...acc[upcomingGame.division], upcomingGame]\n      });\n    }, {\n      d1: [],\n      d3: []\n    });\n  };\n\n  console.log({\n    byDivision: byDivision(upcoming)\n  });\n  console.log({\n    byDivision: byDivision(played)\n  });\n  const gameCards = [{\n    games: byDivision(played)\n  }, {\n    games: byDivision(upcoming)\n  }];\n  console.log({\n    gameCards\n  });\n  return __jsx(Grid, {\n    h: \"auto\",\n    templateRows: \"repeat(2, 1fr)\",\n    templateColumns: \"repeat(2, 1fr)\",\n    gap: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, gameCards.map(game => __jsx(GridItem, {\n    colSpan: [1, 2, 2, 1],\n    rowSpan: [2, 1, 1, 2],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Games;","map":{"version":3,"sources":["/Users/elbgi/Desktop/bombers/frontend/components/Games/index.js"],"names":["SimpleGrid","Flex","Box","Grid","GridItem","React","useState","GameCard","Games","games","console","log","upcoming","filter","game","finished","played","byDivision","gameArray","reduce","acc","upcomingGame","division","d1","d3","gameCards","map"],"mappings":";;;;;;;;;AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsCC,QAAtC,QAAsD,mBAAtD,C,CACA;;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAC3BC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEF,IAAAA;AAAF,GAAZ;AAEA,QAAMG,QAAQ,GAAGH,KAAK,CAACI,MAAN,CAAcC,IAAD,IAAU,CAACA,IAAI,CAACC,QAA7B,CAAjB;AAEA,QAAMC,MAAM,GAAGP,KAAK,CAACI,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACC,QAA5B,CAAf;;AAEA,QAAME,UAAU,GAAIC,SAAD,IAAe;AAChC,WAAOA,SAAS,CAACC,MAAV,CACL,CAACC,GAAD,EAAMC,YAAN,KAAuB;AACrB,6CACKD,GADL;AAEE,SAACC,YAAY,CAACC,QAAd,GAAyB,CACvB,GAAGF,GAAG,CAACC,YAAY,CAACC,QAAd,CADiB,EAEvBD,YAFuB;AAF3B;AAOD,KATI,EAUL;AAAEE,MAAAA,EAAE,EAAE,EAAN;AAAUC,MAAAA,EAAE,EAAE;AAAd,KAVK,CAAP;AAYD,GAbD;;AAeAd,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEM,IAAAA,UAAU,EAAEA,UAAU,CAACL,QAAD;AAAxB,GAAZ;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEM,IAAAA,UAAU,EAAEA,UAAU,CAACD,MAAD;AAAxB,GAAZ;AAEA,QAAMS,SAAS,GAAG,CAChB;AACEhB,IAAAA,KAAK,EAAEQ,UAAU,CAACD,MAAD;AADnB,GADgB,EAIhB;AACEP,IAAAA,KAAK,EAAEQ,UAAU,CAACL,QAAD;AADnB,GAJgB,CAAlB;AASAF,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEc,IAAAA;AAAF,GAAZ;AAEA,SACE,MAAC,IAAD;AACE,IAAA,CAAC,EAAC,MADJ;AAEE,IAAA,YAAY,EAAC,gBAFf;AAGE,IAAA,eAAe,EAAC,gBAHlB;AAIE,IAAA,GAAG,EAAE,CAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGA,SAAS,CAACC,GAAV,CAAeZ,IAAD,IACb,MAAC,QAAD;AAAU,IAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAnB;AAAiC,IAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CANH,CADF;AAYD,CAhDD;;AAkDA,eAAeN,KAAf","sourcesContent":["import { SimpleGrid, Flex, Box, Grid, GridItem } from \"@chakra-ui/layout\";\n// import Link from \"next/link\";\nimport React, { useState } from \"react\";\nimport GameCard from \"./GameCard\";\n\nconst Games = ({ games }) => {\n  console.log({ games });\n\n  const upcoming = games.filter((game) => !game.finished);\n\n  const played = games.filter((game) => game.finished);\n\n  const byDivision = (gameArray) => {\n    return gameArray.reduce(\n      (acc, upcomingGame) => {\n        return {\n          ...acc,\n          [upcomingGame.division]: [\n            ...acc[upcomingGame.division],\n            upcomingGame,\n          ],\n        };\n      },\n      { d1: [], d3: [] }\n    );\n  };\n\n  console.log({ byDivision: byDivision(upcoming) });\n  console.log({ byDivision: byDivision(played) });\n\n  const gameCards = [\n    {\n      games: byDivision(played),\n    },\n    {\n      games: byDivision(upcoming),\n    },\n  ];\n\n  console.log({ gameCards });\n\n  return (\n    <Grid\n      h=\"auto\"\n      templateRows=\"repeat(2, 1fr)\"\n      templateColumns=\"repeat(2, 1fr)\"\n      gap={4}\n    >\n      {gameCards.map((game) => (\n        <GridItem colSpan={[1, 2, 2, 1]} rowSpan={[2, 1, 1, 2]}></GridItem>\n      ))}\n    </Grid>\n  );\n};\n\nexport default Games;\n"]},"metadata":{},"sourceType":"module"}