{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/elbgi/Desktop/bombers/frontend/components/Games/index.js\";\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { SimpleGrid, Flex, Box, Grid, GridItem } from \"@chakra-ui/layout\"; // import Link from \"next/link\";\n\nimport React, { useState } from \"react\";\nimport GameCard from \"./GameCard\";\n\nvar Games = function Games(_ref) {\n  var games = _ref.games;\n  console.log({\n    games: games\n  });\n  var upcoming = games.filter(function (game) {\n    return !game.finished;\n  });\n  var played = games.filter(function (game) {\n    return game.finished;\n  });\n  console.log({\n    upcoming: upcoming,\n    played: played\n  });\n\n  var byDivision = function byDivision(gameArray) {\n    return gameArray.reduce(function (acc, upcomingGame) {\n      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, upcomingGame.division, upcomingGame));\n    }, {});\n  };\n\n  var gameCards = [{\n    game: played[0],\n    title: \"Last Game\",\n    link: \"/schedule\",\n    linkDisplay: \"Results\"\n  }, {\n    game: upcoming[0],\n    title: \"Next Game\",\n    link: \"/schedule\",\n    linkDisplay: \"Schedule\"\n  }];\n  return __jsx(Grid, {\n    h: \"auto\",\n    templateRows: \"repeat(2, 1fr)\",\n    templateColumns: \"repeat(2, 1fr)\",\n    gap: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, gameCards.map(function (game) {\n    return __jsx(GridItem, {\n      colSpan: [1, 2, 2, 1],\n      rowSpan: [2, 1, 1, 2],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, __jsx(GameCard, _extends({}, game, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }\n    })));\n  }));\n};\n\n_c = Games;\nexport default Games;\n\nvar _c;\n\n$RefreshReg$(_c, \"Games\");","map":{"version":3,"sources":["/Users/elbgi/Desktop/bombers/frontend/components/Games/index.js"],"names":["SimpleGrid","Flex","Box","Grid","GridItem","React","useState","GameCard","Games","games","console","log","upcoming","filter","game","finished","played","byDivision","gameArray","reduce","acc","upcomingGame","division","gameCards","title","link","linkDisplay","map"],"mappings":";;;;;;;;;;;;AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsCC,QAAtC,QAAsD,mBAAtD,C,CACA;;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAAe;AAAA,MAAZC,KAAY,QAAZA,KAAY;AAC3BC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEF,IAAAA,KAAK,EAALA;AAAF,GAAZ;AAEA,MAAMG,QAAQ,GAAGH,KAAK,CAACI,MAAN,CAAa,UAACC,IAAD;AAAA,WAAU,CAACA,IAAI,CAACC,QAAhB;AAAA,GAAb,CAAjB;AAEA,MAAMC,MAAM,GAAGP,KAAK,CAACI,MAAN,CAAa,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACC,QAAf;AAAA,GAAb,CAAf;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEC,IAAAA,QAAQ,EAARA,QAAF;AAAYI,IAAAA,MAAM,EAANA;AAAZ,GAAZ;;AAEA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,SAAD,EAAe;AAChC,WAAOA,SAAS,CAACC,MAAV,CAAiB,UAACC,GAAD,EAAMC,YAAN,EAAuB;AAC7C,6CAAYD,GAAZ,2BAAkBC,YAAY,CAACC,QAA/B,EAA0CD,YAA1C;AACD,KAFM,EAEJ,EAFI,CAAP;AAGD,GAJD;;AAMA,MAAME,SAAS,GAAG,CAChB;AACET,IAAAA,IAAI,EAAEE,MAAM,CAAC,CAAD,CADd;AAEEQ,IAAAA,KAAK,EAAE,WAFT;AAGEC,IAAAA,IAAI,EAAE,WAHR;AAIEC,IAAAA,WAAW,EAAE;AAJf,GADgB,EAOhB;AACEZ,IAAAA,IAAI,EAAEF,QAAQ,CAAC,CAAD,CADhB;AAEEY,IAAAA,KAAK,EAAE,WAFT;AAGEC,IAAAA,IAAI,EAAE,WAHR;AAIEC,IAAAA,WAAW,EAAE;AAJf,GAPgB,CAAlB;AAeA,SACE,MAAC,IAAD;AACE,IAAA,CAAC,EAAC,MADJ;AAEE,IAAA,YAAY,EAAC,gBAFf;AAGE,IAAA,eAAe,EAAC,gBAHlB;AAIE,IAAA,GAAG,EAAE,CAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGH,SAAS,CAACI,GAAV,CAAc,UAACb,IAAD;AAAA,WACb,MAAC,QAAD;AAAU,MAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAnB;AAAiC,MAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,QAAD,eAAcA,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADa;AAAA,GAAd,CANH,CADF;AAcD,CA3CD;;KAAMN,K;AA6CN,eAAeA,KAAf","sourcesContent":["import { SimpleGrid, Flex, Box, Grid, GridItem } from \"@chakra-ui/layout\";\n// import Link from \"next/link\";\nimport React, { useState } from \"react\";\nimport GameCard from \"./GameCard\";\n\nconst Games = ({ games }) => {\n  console.log({ games });\n\n  const upcoming = games.filter((game) => !game.finished);\n\n  const played = games.filter((game) => game.finished);\n  console.log({ upcoming, played });\n\n  const byDivision = (gameArray) => {\n    return gameArray.reduce((acc, upcomingGame) => {\n      return { ...acc, [upcomingGame.division]: upcomingGame };\n    }, {});\n  };\n\n  const gameCards = [\n    {\n      game: played[0],\n      title: \"Last Game\",\n      link: \"/schedule\",\n      linkDisplay: \"Results\",\n    },\n    {\n      game: upcoming[0],\n      title: \"Next Game\",\n      link: \"/schedule\",\n      linkDisplay: \"Schedule\",\n    },\n  ];\n\n  return (\n    <Grid\n      h=\"auto\"\n      templateRows=\"repeat(2, 1fr)\"\n      templateColumns=\"repeat(2, 1fr)\"\n      gap={4}\n    >\n      {gameCards.map((game) => (\n        <GridItem colSpan={[1, 2, 2, 1]} rowSpan={[2, 1, 1, 2]}>\n          <GameCard {...game} />\n        </GridItem>\n      ))}\n    </Grid>\n  );\n};\n\nexport default Games;\n"]},"metadata":{},"sourceType":"module"}