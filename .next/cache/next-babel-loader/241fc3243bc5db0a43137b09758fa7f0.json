{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SimpleGrid, Flex, Box, Grid, GridItem } from \"@chakra-ui/layout\"; // import Link from \"next/link\";\n\nimport React, { useState } from \"react\";\nimport GameCard from \"./GameCard\";\n\nconst Games = ({\n  games\n}) => {\n  const upcoming = games.filter(game => !game.finished) || [];\n  const played = games.filter(game => game.finished) || [];\n\n  const byDivision = gameArray => {\n    return gameArray.reduce((acc, upcomingGame) => {\n      return _objectSpread(_objectSpread({}, acc), {}, {\n        [upcomingGame.division]: [...acc[upcomingGame.division], upcomingGame]\n      });\n    }, {\n      d1: [],\n      d3: []\n    });\n  };\n\n  const gameCards = [{\n    games: upcoming || [],\n    title: \"Next Game\",\n    link: \"/schedule\",\n    linkDisplay: \"Schedule\"\n  }, {\n    games: played || [],\n    title: \"Last Game\",\n    link: \"/schedule\",\n    linkDisplay: \"Results\"\n  }];\n  return __jsx(Grid, {\n    h: \"auto\",\n    templateRows: \"repeat(2, 1fr)\",\n    templateColumns: \"repeat(2, 1fr)\",\n    gap: 4,\n    m: 8\n  }, gameCards.map(game => __jsx(GridItem, {\n    key: game.title,\n    colSpan: [1, 2, 2, 1, 1],\n    rowSpan: [2, 1, 1, 2, 2]\n  }, __jsx(GameCard, game))));\n};\n\nexport default Games;","map":null,"metadata":{},"sourceType":"module"}