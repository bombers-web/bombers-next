{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Box, Flex, LinkBox } from \"@chakra-ui/layout\";\nimport Link from \"next/link\";\nimport React from \"react\";\nimport Image from \"./image\";\n\nconst Card = _ref => {\n  let {\n    link,\n    as,\n    children,\n    image,\n    border,\n    bgColor,\n    styles,\n    _hover,\n    imageProps\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"link\", \"as\", \"children\", \"image\", \"border\", \"bgColor\", \"styles\", \"_hover\", \"imageProps\"]);\n\n  const makeClickable = component => link ? __jsx(Link, {\n    as: as,\n    href: link\n  }, __jsx(LinkBox, {\n    m: \"4\"\n  }, component)) : __jsx(React.Fragment, null, component);\n\n  const hoverStyles = link ? {\n    border: \"1px solid #e2e2e2\",\n    transition: \"all .2s ease-in-out\",\n    // boxShadow: \"0px 5px 10px #212121\",\n    _hover: {\n      transform: \"scale(1.02)\",\n      boxShadow: \"0px 5px 10px #21212150\"\n    }\n  } : {};\n\n  const overrideStyles = _objectSpread(_objectSpread({}, styles), {}, {\n    background: bgColor\n  });\n\n  return makeClickable(__jsx(Flex, _extends({\n    minW: \"100%\",\n    maxW: \"5xl\",\n    minH: \"200px\",\n    borderWidth: border ? \"2px\" : 0,\n    overflow: \"hidden\",\n    borderRadius: \"3px\",\n    borderColor: \"gray.dark\",\n    cursor: \"pointer\",\n    sx: _objectSpread(_objectSpread({}, hoverStyles), overrideStyles),\n    bgGradient: \"gradient.main\",\n    _hover: _hover,\n    flexDirection: \"column\",\n    justifyContent: \"space-around\"\n  }, props), image && __jsx(Box, {\n    sx: {\n      display: \"flex\",\n      flexGrow: 3\n    }\n  }, __jsx(Image, _extends({\n    image: image\n  }, imageProps))), children));\n};\n\nexport default Card;","map":null,"metadata":{},"sourceType":"module"}